<?php

/**
*   文字変換
*
*   @version 181029
*/

declare(strict_types=1);

namespace Concerto\mbstring;

class MbConvert
{
    /*
    *   変換テーブル
    *
    *   @var array
    **/
    protected static $convertTables =
        ['a' => 'あ', 'i' => 'い', 'u' => 'う', 'e' => 'え', 'o' => 'お'
            , 'k' => ['a' => 'か', 'i' => 'き', 'u' => 'く', 'e' => 'け', 'o' => 'こ'
                , 'y' => ['a' => 'きゃ', 'i' => 'きぃ', 'u' => 'きゅ', 'e' => 'きぇ', 'o' => 'きょ'
                ]
            ]
            , 's' => ['a' => 'さ', 'i' => 'し', 'u' => 'す', 'e' => 'せ', 'o' => 'そ'
                , 'y' => ['a' => 'しゃ', 'i' => 'しぃ', 'u' => 'しゅ', 'e' => 'しぇ', 'o' => 'しょ'
                ]
                , 'h' => ['a' => 'しゃ', 'i' => 'し', 'u' => 'しゅ', 'e' => 'しぇ', 'o' => 'しょ'
                ]
            ]
            , 't' => ['a' => 'た', 'i' => 'ち', 'u' => 'つ', 'e' => 'て', 'o' => 'と'
                , 'y' => ['a' => 'ちゃ', 'i' => 'ちぃ', 'u' => 'ちゅ', 'e' => 'ちぇ', 'o' => 'ちょ'
                ]
                , 'h' => ['a' => 'てゃ', 'i' => 'てぃ', 'u' => 'てゅ', 'e' => 'てぇ', 'o' => 'てょ'
                ]
                , 's' => ['a' => 'つぁ', 'i' => 'つぃ', 'u' => 'つ', 'e' => 'つぇ', 'o' => 'つぉ'
                ]
            ]
            , 'n' => ['a' => 'な', 'i' => 'に', 'u' => 'ぬ', 'e' => 'ね', 'o' => 'の'
                , 'y' => ['a' => 'にゃ', 'i' => 'にぃ', 'u' => 'にゅ', 'e' => 'にぇ', 'o' => 'にょ'
                ]
                , 'n' => 'ん'
            ]
            , 'h' => ['a' => 'は', 'i' => 'ひ', 'u' => 'ふ', 'e' => 'へ', 'o' => 'ほ'
                , 'y' => ['a' => 'ひゃ', 'i' => 'ひぃ', 'u' => 'ひゅ', 'e' => 'ひぇ', 'o' => 'ひょ'
                ]
            ]
            , 'm' => ['a' => 'ま', 'i' => 'み', 'u' => 'む', 'e' => 'め', 'o' => 'も'
                , 'y' => ['a' => 'みゃ', 'i' => 'みぃ', 'u' => 'みゅ', 'e' => 'みぇ', 'o' => 'みょ'
                ]
            ]
            , 'y' => ['a' => 'や', 'i' => 'い', 'u' => 'ゆ', 'e' => 'いぇ', 'o' => 'よ'
                ]
            , 'r' => ['a' => 'ら', 'i' => 'り', 'u' => 'る', 'e' => 'れ', 'o' => 'ろ'
                , 'y' => ['a' => 'りゃ', 'i' => 'りぃ', 'u' => 'りゅ', 'e' => 'りぇ', 'o' => 'りょ'
                ]
            ]
            , 'w' => ['a' => 'わ', 'i' => 'うぃ', 'u' => 'う', 'e' => 'うぇ', 'o' => 'を'
                ]
            , 'g' => ['a' => 'が', 'i' => 'ぎ', 'u' => 'ぐ', 'e' => 'げ', 'o' => 'ご'
                , 'y' => ['a' => 'ぎゃ', 'i' => 'ぎぃ', 'u' => 'ぎゅ', 'e' => 'ぎぇ', 'o' => 'ぎょ'
                ]
            ]
            , 'z' => ['a' => 'ざ', 'i' => 'じ', 'u' => 'ず', 'e' => 'ぜ', 'o' => 'ぞ'
                , 'y' => ['a' => 'じゃ', 'i' => 'じぃ', 'u' => 'じゅ', 'e' => 'じぇ', 'o' => 'じょ'
                ]
            ]
            , 'd' => ['a' => 'だ', 'i' => 'ぢ', 'u' => 'づ', 'e' => 'で', 'o' => 'ど'
                , 'y' => ['a' => 'ぢゃ', 'i' => 'ぢぃ', 'u' => 'ぢゅ', 'e' => 'ぢぇ', 'o' => 'ぢょ'
                ]
            ]
            , 'b' => ['a' => 'ば', 'i' => 'び', 'u' => 'ぶ', 'e' => 'べ', 'o' => 'ぼ'
                , 'y' => ['a' => 'びゃ', 'i' => 'びぃ', 'u' => 'びゅ', 'e' => 'びぇ', 'o' => 'びょ'
                ]
            ]
            , 'p' => ['a' => 'ぱ', 'i' => 'ぴ', 'u' => 'ぷ', 'e' => 'ぺ', 'o' => 'ぽ'
                , 'y' => ['a' => 'ぴゃ', 'i' => 'ぴぃ', 'u' => 'ぴゅ', 'e' => 'ぴぇ', 'o' => 'ぴょ'
                ]
            ]
            , 'c' => ['a' => 'か', 'i' => 'し', 'u' => 'く', 'e' => 'せ', 'o' => 'こ'
                , 'y' => ['a' => 'ちゃ', 'i' => 'ちぃ', 'u' => 'ちゅ', 'e' => 'ちぇ', 'o' => 'ちょ'
                ]
                , 'h' => ['a' => 'ちゃ', 'i' => 'ち', 'u' => 'ちゅ', 'e' => 'ちぇ', 'o' => 'ちょ'
                ]
            ]
            , 'f' => ['a' => 'ふぁ', 'i' => 'ふぃ', 'u' => 'ふ', 'e' => 'ふぇ', 'o' => 'ふぉ'
                , 'y' => ['a' => 'ふゃ', 'i' => 'ふぃ', 'u' => 'ふゅ', 'e' => 'ふぇ', 'o' => 'ふょ'
                ]
            ]
            , 'j' => ['a' => 'じゃ', 'i' => 'じ', 'u' => 'じゅ', 'e' => 'じぇ', 'o' => 'じょ'
                , 'y' => ['a' => 'じゃ', 'i' => 'じぃ', 'u' => 'じゅ', 'e' => 'じぇ', 'o' => 'じょ'
                ]
            ]
            , 'l' => ['a' => 'ぁ', 'i' => 'ぃ', 'u' => 'ぅ', 'e' => 'ぇ', 'o' => 'ぉ'
                , 'y' => ['a' => 'ゃ', 'i' => 'ぃ', 'u' => 'ゅ', 'e' => 'ぇ', 'o' => 'ょ'
                ]
            ]
            , 'q' => ['a' => 'くぁ', 'i' => 'くぃ', 'u' => 'く', 'e' => 'くぇ', 'o' => 'くぉ'
                , 'y' => ['a' => 'くゃ', 'i' => 'くぃ', 'u' => 'くゅ', 'e' => 'くぇ', 'o' => 'くょ'
                ]
            ]
            , 'v' => ['a' => 'ヴぁ', 'i' => 'ヴぃ', 'u' => 'ヴ', 'e' => 'ヴぇ', 'o' => 'ヴぉ'
                , 'y' => ['a' => 'ヴゃ', 'i' => 'ヴぃ', 'u' => 'ヴゅ', 'e' => 'ヴぇ', 'o' => 'ヴょ'
                ]
            ]
            , 'x' => ['a' => 'ぁ', 'i' => 'ぃ', 'u' => 'ぅ', 'e' => 'ぇ', 'o' => 'ぉ'
                , 'y' => ['a' => 'ゃ', 'i' => 'ぃ', 'u' => 'ゅ', 'e' => 'ぇ', 'o' => 'ょ'
                ]
            ]
        ];
    
    /**
    *   ローマ字=>かな変換
    *
    *   @param string $romaji
    *   @return string
    */
    public static function roma2kana(string $romaji): string
    {
        $kana = '';
        $roma = str_split(strtolower($romaji));
        $boin = array('a', 'i', 'u', 'e', 'o');
        
        for ($i = 0; $i < count($roma); $i++) {
            $t = ord($roma[$i]);
            //アルファベット以外
            if (($t < 0x61) || ($t > 0x7a)) {
                $kana .= $roma[$i];
            //母音
            } elseif (in_array($roma[$i], $boin)) {
                $kana .= static::$convertTables[$roma[$i]];
            //子音で最終文字
            } elseif ($i >= count($roma)) {
                for ($j = $i; $j < count($roma); $j++) {
                    $kana .= $roma[$j];
                }
            //nnはん
            } elseif (($roma[$i] == 'n') && ($roma[$i + 1] == 'n')) {
                $kana .= 'ん';
                $i++;
            //同じ子音が続く(nnを除く)
            } elseif (($roma[$i] == $roma[$i + 1]) && ($roma[$i + 1] != 'n')) {
                $kana .= 'っ';
            //子音
            } else {
                //子音の後ろが母音
                if (in_array($roma[$i + 1], $boin)) {
                    $kana .= static::$convertTables[$roma[$i]][$roma[$i + 1]];
                    $i++;
                //テーブルに存在すれば子音
                } elseif (
                    @static::$convertTables[$roma[$i]][$roma[$i + 1]][$roma[$i + 2]]
                        != null
                ) {
                    $kana .=
                        @static::$convertTables[$roma[$i]][$roma[$i + 1]][$roma[$i + 2]];
                    $i += 2;
                } else {
                    $kana .= $roma[$i];
                }
            }
        }
        return $kana;
    }
}
